{"version":3,"sources":["components/ListContainer/styled.js","components/ListContainer/index.js","components/Tile/styled.js","components/Tile/index.js","components/Container/styled.js","components/Container/index.js","pages/HomePage/styled.js","core/paths.js","pages/HomePage/index.js","features/Navbar/styled.js","assets/vader.svg","features/Navbar/index.js","components/ErrorPage/styled.js","core/routes.js","components/ErrorPage/index.js","assets/spinner.svg","components/Loading/styled.js","components/Loading/index.js","features/ListItems/styled.js","assets/search.svg","features/Search/searchQueryParameter.js","core/queryParameter.js","features/Search/styled.js","features/Search/index.js","assets/empty.svg","components/EmptyResults/styled.js","components/EmptyResults/index.js","features/ListItems/ListItems.js","pages/Planets.js","pages/People.js","pages/Films.js","pages/Species.js","pages/Vehicles.js","pages/Starships.js","components/Pill.js","features/styled.js","features/FilmDetails/index.js","features/PersonDetails/index.js","features/PlanetDetails/index.js","features/SpeciesDetails/index.js","features/StarshipDetails/index.js","features/VehicleDetails/index.js","pages/DetailsPage.js","App.js","assets/background.jpg","core/GlobalStyle.js","serviceWorker.js","index.js","core/theme.js"],"names":["StyledListContainer","styled","div","theme","media","tablet","home","css","extraMobile","ListContainer","children","StyledTileContainer","color","yellow","dark","StyledTitle","h2","fontSize","large","Tile","title","StyledContainer","Container","StyledHeader","header","h1","xxxLarge","StyledSubTitle","xlarge","StyledPerspectiveContainer","StyledLink","Link","paths","HomePage","map","path","to","StyledNavbar","nav","StyledNavbarMenu","ul","StyledNavbarItem","li","StyledNavLink","NavLink","attrs","activeClassName","StyledIcon","img","StyledIconContainer","Navbar","src","vader","item","Wrapper","section","ErrorTitle","StyledImage","StyledImageContainer","ErrorMessage","p","HomePageButton","button","toDetailsPage","id","ErrorPage","alt","StyledWrapper","StyledSpinner","Loading","spinner","xxlarge","key","useQueryParameter","location","useLocation","URLSearchParams","search","get","StyledLabel","label","mobile","Button","StyledInput","input","small","Search","query","useState","searchQuery","setSearchQuery","replaceQueryParameter","history","useHistory","value","searchParams","trim","delete","set","replace","pathname","toString","useReplaceQueryParameter","useEffect","placeholder","onChange","target","setTimeout","onClick","HeaderTitle","EmptyResults","empty","ListItems","data","filter","name","toLowerCase","includes","i","length","Planets","GET_ALL_PLANETS","gql","useQuery","loading","error","allPlanets","planets","People","GET_ALL_PEOPLE","allPeople","people","Films","GET_ALL_FILMS","allFilms","films","Species","GET_ALL_SPECIES","allSpecies","species","Vehicles","GET_ALL_VEHICLES","allVehicles","vehicles","Starships","GET_ALL_STARSHIPS","allStarships","starships","Pill","crawler","StyledDetailsBlock","StyledTileDetail","ListItem","normal","FilmDetails","GET_FILM_DETALS","variables","film","openingCrawl","as","director","releaseDate","speciesConnection","specie","starshipConnection","starship","vehilcesConnection","vehicle","characterConnection","characters","character","planetConnection","planet","PersonDetails","GET_PERSON_DETALS","person","birthYear","eyeColor","gender","hairColor","height","mass","skinColor","homeworld","filmConnection","PlanetDetails","GET_PLANET_DETALS","diameter","rotationPeriod","orbitalPeriod","climates","gravity","terrains","surfaceWater","population","residentConnection","residents","resident","SpeciesDetails","GET_SPECIES_DETALS","classification","designation","language","averageLifespan","averageHeight","eyeColors","eye","hairColors","skinColors","personConnection","StarshipDetails","GET_STARSHIP_DETALS","model","starshipClass","crew","passengers","maxAtmospheringSpeed","cargoCapacity","manufacturers","manufacturer","pilotConnection","pilots","pilot","VehicleDetails","GET_VEHICLE_DETALS","vehicleClass","DetailsPage","useParams","App","exact","GlobalStyle","createGlobalStyle","background","Boolean","window","hostname","match","client","ApolloClient","uri","cache","InMemoryCache","headers","credentials","ReactDOM","render","StrictMode","xSmall","medium","black","light","extraMobileSmall","desktop","ApolloProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7daaf65d.chunk.js","sourcesContent":["import styled, { css } from \"styled-components\";\n\nexport const StyledListContainer = styled.div`\n  width: 100%;\n  display: grid;\n  grid-gap: 24px;\n  grid-template-columns: repeat(3, 1fr);\n  justify-items: center;\n  padding: 15px;\n  @media (max-width: ${({ theme }) => theme.media.tablet}) {\n    grid-template-columns: repeat(2, 1fr);\n  }\n  ${({ home }) =>\n    home &&\n    css`\n      grid-template-columns: repeat(3, 1fr);\n      grid-gap: 20px;\n      grid-auto-rows: 150px;\n      @media (max-width: ${({ theme }) => theme.media.tablet}) {\n        grid-template-columns: repeat(2, 1fr);\n      }\n      @media (max-width: ${({ theme }) => theme.media.extraMobile}) {\n        grid-auto-rows: unset;\n      }\n    `}\n`;\n","import React from \"react\";\nimport { StyledListContainer } from \"./styled\";\n\nconst ListContainer = ({children, home}) => {\n  return (\n    <>\n      <StyledListContainer home={home}>\n        {children}\n      </StyledListContainer>\n    </>\n  );\n};\n\nexport default ListContainer;","import styled from \"styled-components\";\n\nexport const StyledTileContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border: 1px solid ${({ theme }) => theme.color.yellow};\n  border-radius: 15px;\n  background-color: ${({ theme }) => theme.color.dark};\n  cursor: pointer;\n  transition: .2s;\n  &:hover {\n    color: ${({ theme }) => theme.color.dark};\n    background-color: ${({ theme }) => theme.color.yellow};\n  }\n`;\n\nexport const StyledTitle = styled.h2`\n  font-size: ${({ theme }) => theme.fontSize.large};\n  text-align: center;\n  text-transform: uppercase;\n`;\n","import React from \"react\";\nimport { StyledTileContainer, StyledTitle } from \"./styled\";\n\nconst Tile = ({ title}) => {\n  \n  return (\n    <>\n      <StyledTileContainer>\n        <StyledTitle >{title}</StyledTitle>\n      </StyledTileContainer>\n    </>\n  );\n};\n\nexport default Tile;\n","import styled, { css } from \"styled-components\";\n\nexport const StyledContainer = styled.div`\n  max-width: 1200px;\n  margin: 80px auto 0;\n  ${({ home }) =>\n    home &&\n    css`\n      position: relative;\n      perspective: 1000px;\n      @media (max-width: ${({ theme }) => theme.media.tablet}) {\n        margin: 0 auto 0;\n      }\n    `}\n`;\n","import React from \"react\";\nimport { StyledContainer } from \"./styled\";\n\nconst Container = ({children, home}) => {\n  return <StyledContainer home={home}>{children}</StyledContainer>;\n};\n\nexport default Container;\n","import { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nexport const StyledHeader = styled.header`\nmax-width: 1200px;\nmargin: auto;\ntext-align: center;\n`;\nexport const StyledTitle = styled.h1`\nfont-size: ${({theme})=> theme.fontSize.xxxLarge};\nmargin: 5px;\n`;\nexport const StyledSubTitle = styled.h2`\nfont-size: ${({theme})=> theme.fontSize.xlarge};\nmargin: 5px;\n`;\nexport const StyledHeaderContainer = styled.div`\ntransform: rotateX(40deg) rotateY(0deg);\nwidth: 80%;\nmargin: auto;\n`;\nexport const StyledPerspectiveContainer = styled.div`\ntransform: rotateX(40deg) rotateY(0deg);\nwidth: 80%;\nmargin: auto;\n`;\nexport const StyledLink = styled(Link)`\n  text-decoration: none;\n  color: inherit;\n  width: 100%;\n`;","export const paths = [\n  \"people\",\n  \"planets\",\n  \"films\",\n  \"species\",\n  \"vehicles\",\n  \"starships\",\n];\n","import React from \"react\";\nimport ListContainer from \"../../components/ListContainer\";\nimport Tile from \"../../components/Tile\";\nimport Container from \"../../components/Container\";\nimport {\n  StyledHeader,\n  StyledSubTitle,\n  StyledLink,\n  StyledTitle,\n  StyledPerspectiveContainer,\n} from \"./styled\";\nimport { paths } from \"../../core/paths\";\n\nconst HomePage = () => {\n  return (\n    <>\n      <Container home>\n        <StyledPerspectiveContainer>\n          <StyledHeader>\n            <StyledSubTitle>Welcome to</StyledSubTitle>\n            <StyledTitle>The Star Wars</StyledTitle>\n            <StyledSubTitle>Encyclopedia</StyledSubTitle>\n            <p>A long time ago in a galaxy far, far away....</p>\n          </StyledHeader>\n          <ListContainer home>\n            {paths.map((path) => (\n              <StyledLink key={path} to={`/${path}`}>\n                <Tile title={path} />\n              </StyledLink>\n            ))}\n          </ListContainer>\n        </StyledPerspectiveContainer>\n      </Container>\n    </>\n  );\n};\n\nexport default HomePage;\n","import { Link, NavLink } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nexport const StyledNavbar = styled.nav`\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: space-between;\nborder-bottom:1px dotted ${({theme})=>theme.color.yellow};\n`;\nexport const StyledNavbarMenu = styled.ul`\ndisplay: flex;\nflex-wrap: wrap;\npadding: 0;\nmargin: 0;\njustify-content: center;\n`;\nexport const StyledNavbarItem = styled.li`\nlist-style: none;\nmargin: 5px;\ntext-transform: capitalize;\n`;\nexport const StyledNavLink = styled(NavLink).attrs(() => ({\n    activeClassName: \"active\",\n  }))`\n  text-decoration: none;\n  color: inherit;\n  &.active {\n    border-left: 1px solid ${({ theme }) => theme.color.yellow};\n    border-right: 1px solid ${({ theme }) => theme.color.yellow};\n    box-sizing: border-box;\n  }\n`;\nexport const StyledLink = styled(Link)`\n  text-decoration: none;\n  color: inherit;\n  margin: 5px;\n`;\nexport const StyledIcon = styled.img`\nwidth: 100%;\nheight: 100%;\ncolor: ${({ theme }) => theme.color.yellow};\n`;\nexport const StyledIconContainer = styled.div`\nwidth: 30px;\nheight: 30px;\nbackground-color: ${({ theme }) => theme.color.yellow};\nborder-radius: 50%;\n`;","export default __webpack_public_path__ + \"static/media/vader.3a0ad9f3.svg\";","import React from \"react\";\nimport { paths } from \"../../core/paths\";\nimport {\n  StyledIcon,\n  StyledIconContainer,\n  StyledLink,\n  StyledNavbar,\n  StyledNavbarItem,\n  StyledNavbarMenu,\n  StyledNavLink,\n} from \"./styled\";\nimport vader from \"../../assets/vader.svg\";\n\nconst Navbar = () => {\n  return (\n    <StyledNavbar>\n      <StyledLink to={\"/\"}>\n        <StyledIconContainer>\n          <StyledIcon src={vader} />\n        </StyledIconContainer>\n      </StyledLink>\n      <StyledNavbarMenu>\n        {paths.map((item) => (\n          <StyledNavLink key={item} to={`/${item}`}>\n            <StyledNavbarItem>{item}</StyledNavbarItem>\n          </StyledNavLink>\n        ))}\n      </StyledNavbarMenu>\n    </StyledNavbar>\n  );\n};\n\nexport default Navbar;\n","import styled from \"styled-components\";\n\nexport const Wrapper = styled.section`\n    padding:90px 20px;\n    display:flex;\n    flex-direction:column;\n    justify-content:center;\n    align-items:center;\n`;\n\nexport const ErrorTitle = styled.h1`\n    margin-top:38px;\n    margin-bottom:0px;\n    font-weight: 600;\n    font-size: 36px;\n    line-height: 120%;\n`;\n\nexport const StyledImage = styled.img`\n    width: 100%;\n    height: 100%;\n`;\nexport const StyledImageContainer = styled.div`\nbackground-color: ${({ theme }) => theme.color.yellow};\nwidth:180px;\nheight: 180px;\nborder-radius: 50%;\n`;\nexport const ErrorMessage = styled.p`\n    margin-top:24px;\n    font-weight: 500;\n    font-size: 22px;\n    line-height: 130%;\n    margin-bottom:24px;\n`;\n\nexport const HomePageButton = styled.button`\n    background-color:${({ theme }) => theme.color.yellow};\n    color:${({ theme }) => theme.color.dark};\n    border:none;\n    border-radius: 5px;\n    padding: 16px 24px;\n    font-style: normal;\n    font-weight: bold;\n    font-size: 14px;\n    line-height: 19px;\n    transition: 0.5s filter;\n\n    &:hover{\n        filter:brightness(115%);\n        cursor: pointer;\n    }\n`;","export const toHomePage = () => \"/\";\nexport const toDetailsPage = ({ path, id } = { path: \":path\", id: \":id\" }) =>\n  `${path}/${id}`;\n","\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { StyledImage, StyledImageContainer, ErrorTitle, Wrapper, ErrorMessage, HomePageButton } from \"./styled\";\nimport vader from \"../../assets/vader.svg\";\nimport { toHomePage } from \"../../core/routes\";\n\nconst ErrorPage = () => {\n    return (\n        <Wrapper>\n            <StyledImageContainer><StyledImage src={vader} alt=\"ConnectionErrorImage\" /></StyledImageContainer>\n            <ErrorTitle>Ooops! Something went wrong...</ErrorTitle>\n            <ErrorMessage>Please check your network connection and try again</ErrorMessage>\n                <Link\n                    to={toHomePage()}\n                >\n                    <HomePageButton>Back to home page</HomePageButton>\n                </Link>\n        </Wrapper>\n    )\n};\n\nexport default ErrorPage","export default __webpack_public_path__ + \"static/media/spinner.17b2cd24.svg\";","import styled from \"styled-components\";\n\nexport const StyledWrapper = styled.div`\n  height: 90vh; \n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\nexport const StyledSpinner = styled.img`\n  width: 91px;\n  height: 91px;\n  animation: rotation 2s infinite linear;\n  @keyframes rotation {\n    0% {\n      transform: rotate(0);\n    }\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n`;\n","import React from \"react\";\nimport spinner from \"../../assets/spinner.svg\";\nimport { StyledWrapper, StyledSpinner } from \"./styled\";\n\nconst Loading = () => {\n  return <StyledWrapper>\n    <StyledSpinner src={spinner} alt=\"loading\" />\n  </StyledWrapper>;\n};\n\nexport default Loading;\n","import { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nexport const StyledLink = styled(Link)`\n  text-decoration: none;\n  color: inherit;\n  width: 100%;\n`;\n\nexport const StyledTitle = styled.h2`\ntext-align: center;\nfont-size: ${({theme})=>theme.fontSize.xxlarge};\ntext-transform: capitalize;\n`;\nexport const StyledSearchLine = styled.p`\ntext-align: center;\nmargin: 10px;\n`;\n\nexport const StyledPill = styled.button`\nbackground-color: ${({theme})=>theme.color.yellow};\nborder-radius: 10px;\npadding: 2px;\nmargin: 0 4px;\nwidth: 30px;\nheight: 30px;\ncolor: ${({theme})=>theme.color.dark};\nborder: none;\noutline: none;\ncursor: pointer;\n`;","export default __webpack_public_path__ + \"static/media/search.13c92635.svg\";","export const key = \"search\";","import { useHistory, useLocation } from \"react-router-dom\";\n\nexport const useQueryParameter = (key) => {\n  const location = useLocation();\n  return new URLSearchParams(location.search).get(key);\n};\n\nexport const useReplaceQueryParameter = () => {\n  const history = useHistory();\n  const location = useLocation();\n\n  return ({ key, value }) => {\n    const searchParams = new URLSearchParams(location.search);\n    if (value.trim() === \"\") {\n      searchParams.delete(key);\n    } else {\n      searchParams.set(key, value);\n    }\n    history.replace(`${location.pathname}?${searchParams.toString()}`);\n  };\n};\n","import styled from \"styled-components\";\n\nexport const StyledLabel = styled.label`\n  width: 60%;\n  padding: 5px;\n  display: flex;\n  align-items: center;\n  border-radius: 33px;\n  margin: 0 auto 30px;\n  border: 1px solid ${({ theme }) => theme.color.yellow};\n  background-color: black;\n  @media (max-width: ${({ theme }) => theme.media.mobile}) {\n    flex-grow: 1;\n  }\n`;\nexport const StyledIcon = styled.img`\n  width: 25px;\n  height: 25px;\n  margin: 10px 15px 10px 10px;\n`;\nexport const Button = styled.button`\n  background: none;\n  border: none;\n  color: ${({ theme }) => theme.color.yellow};\n  font-size: 25px;\n  cursor: pointer;\n`;\nexport const StyledInput = styled.input`\n  border-radius: 33px;\n  border: none;\n  color: ${({ theme }) => theme.color.yellow};\n  background-color: transparent;\n  font-size: ${({ theme }) => theme.fontSize.large};\n  flex-grow: 0.8;\n  width: 75%;\n  outline: none;\n  @media (max-width: ${({ theme }) => theme.media.tablet}) {\n    font-size: ${({ theme }) => theme.fontSize.small};\n  }\n  :focus::-webkit-input-placeholder {\n    color: transparent;\n  }\n  :focus:-moz-placeholder {\n    color: transparent;\n  }\n\n  :focus::-moz-placeholder {\n    color: transparent;\n  }\n\n  :focus:-ms-input-placeholder {\n    color: transparent;\n  }\n`;\n","import React, { useEffect, useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport _ from \"lodash\";\nimport search from \"../../assets/search.svg\";\nimport { key } from \"./searchQueryParameter\";\nimport {\n  useQueryParameter,\n  useReplaceQueryParameter,\n} from \"../../core/queryParameter\";\nimport { Button, StyledIcon, StyledInput, StyledLabel } from \"./styled\";\n\nconst Search = () => {\n  const query = useQueryParameter(key);\n  const [searchQuery, setSearchQuery] = useState(query);\n  const replaceQueryParameter = useReplaceQueryParameter(true);\n  const location = useLocation();\n  const path = location.pathname;\n\n  useEffect(() => {\n    setSearchQuery(\"\");\n  }, [path]);\n\n  const onInputChange = ({ target }) => {\n    setSearchQuery(target.value);\n    setTimeout(() => {\n      replaceQueryParameter({\n        key: key,\n        value: target.value.trim() !== \"\" ? target.value.trim() : \"\",\n      });\n    }, 3000);\n  };\n\n  const clearQuery = () => {\n    replaceQueryParameter({\n      key: key,\n      value: \"\",\n    });\n    setSearchQuery(\"\");\n  };\n\n  return (\n    <StyledLabel>\n      <StyledIcon src={search} />\n      <StyledInput\n        placeholder={`Search ${path.replace(\"/\", \"\")}...`}\n        value={searchQuery || \"\"}\n        onChange={onInputChange}\n      />\n      {query && <Button onClick={() => clearQuery()}>X</Button>}\n    </StyledLabel>\n  );\n};\nexport default Search;\n","export default __webpack_public_path__ + \"static/media/empty.89b93f00.svg\";","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n    margin:20px;\n    display:flex;\n    flex-direction:column;\n    justify-content:center;\n    align-items:center;\n`;\n\nexport const HeaderTitle = styled.p`\n    margin:0px 0px 40px 0px;\n    font-size: ${({theme})=>theme.fontSize.large};\n    text-align: center;\n    letter-spacing: 0px;\n    text-transform: uppercase;\n`;\n\nexport const StyledImage = styled.img`\n    max-width:100%;\n    margin:0px auto;\n`;\nexport const StyledImageContainer = styled.div`\nbackground-color: ${({ theme }) => theme.color.yellow};\nwidth:180px;\nheight: 180px;\nborder-radius: 50%;\n`;","import React from \"react\";\nimport empty from \"../../assets/empty.svg\";\n\nimport {\n  Wrapper,\n  HeaderTitle,\n  StyledImage,\n  StyledImageContainer,\n} from \"./styled\";\n\nconst EmptyResults = ({ query }) => {\n  return (\n    <Wrapper>\n      <HeaderTitle>Sorry, there are no results for \"{query}\"</HeaderTitle>\n      <StyledImageContainer>\n        <StyledImage src={empty} alt=\"Searching Empty image\" />\n      </StyledImageContainer>\n    </Wrapper>\n  );\n};\n\nexport default EmptyResults;\n","import React from \"react\";\nimport ListContainer from \"../../components/ListContainer\";\nimport Tile from \"../../components/Tile\";\nimport Container from \"../../components/Container\";\nimport { StyledLink, StyledTitle } from \"./styled\";\nimport { toDetailsPage } from \"../../core/routes\";\nimport { useLocation } from \"react-router-dom\";\nimport Search from \"../Search\";\nimport { useQueryParameter } from \"../../core/queryParameter\";\nimport { key } from \"../Search/searchQueryParameter\";\nimport EmptyResults from \"../../components/EmptyResults\";\n\nconst ListItems = ({ data }) => {\n  let location = useLocation();\n  const query = useQueryParameter(key);\n\n  return (\n    <Container>\n      <StyledTitle>{location.pathname.replace(\"/\", \"\")}</StyledTitle>\n      <Search />\n      <ListContainer home={false}>\n        {data\n          .filter((item) =>\n            (item.name ?? item.title)\n              .toLowerCase()\n              .includes(query ?? \"\".toLowerCase())\n          )\n          .map((key, i) => (\n            <StyledLink\n              key={i}\n              to={toDetailsPage({ path: location.pathname, id: key.id })}\n            >\n              <Tile title={key.name ? key.name : key.title} />\n            </StyledLink>\n          ))}\n      </ListContainer>{\" \"}\n      {query &&\n        data.filter((item) =>\n          (item.name ?? item.title).toLowerCase().includes(query.toLowerCase())\n        ).length < 1 && <EmptyResults query={query} />}\n    </Container>\n  );\n};\n\nexport default ListItems;\n","import React from \"react\";\nimport ErrorPage from \"../components/ErrorPage\";\nimport Loading from \"../components/Loading\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport ListItems from \"../features/ListItems/ListItems\";\n\nconst Planets = () => {\n  // const dispatch = useDispatch();\n  // const status = useSelector(selectResourceContentStatus);\n  // const results = useSelector(selectResourceResults);\n  // const { path } = useParams();\n  // const query = useQueryParameter(key);\n\n  const GET_ALL_PLANETS = gql`\n    {\n      allPlanets {\n        planets {\n          name\n          id\n        }\n      }\n    }\n  `;\n\n  const { loading, data, error } = useQuery(GET_ALL_PLANETS);\n\n  if (error) {\n    return <ErrorPage />;\n  }\n\n  if (loading) {\n    return <Loading />;\n  }\n\n  return <ListItems data={data.allPlanets.planets} />;\n};\n\nexport default Planets;\n","import React from \"react\";\nimport ErrorPage from \"../components/ErrorPage\";\nimport Loading from \"../components/Loading\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport ListItems from \"../features/ListItems/ListItems\";\n\nconst People = () => {\n  // const dispatch = useDispatch();\n  // const status = useSelector(selectResourceContentStatus);\n  // const results = useSelector(selectResourceResults);\n  // const { path } = useParams();\n  // const query = useQueryParameter(key);\n\n  const GET_ALL_PEOPLE = gql`\n    {\n      allPeople {\n        people {\n          name\n          id\n        }\n      }\n    }\n  `;\n\n  const { loading, data, error } = useQuery(GET_ALL_PEOPLE);\n\n  if (error) {\n    return <ErrorPage />;\n  }\n\n  if (loading) {\n    return <Loading />;\n  }\n\n  return <ListItems data={data.allPeople.people} />;\n};\n\nexport default People;\n","import React from \"react\";\nimport ErrorPage from \"../components/ErrorPage\";\nimport Loading from \"../components/Loading\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport ListItems from \"../features/ListItems/ListItems\";\n\nconst Films = () => {\n  // const dispatch = useDispatch();\n  // const status = useSelector(selectResourceContentStatus);\n  // const results = useSelector(selectResourceResults);\n  // const { path } = useParams();\n  // const query = useQueryParameter(key);\n\n  const GET_ALL_FILMS = gql`\n    {\n      allFilms {\n        films {\n          title\n          id\n        }\n      }\n    }\n  `;\n\n  const { loading, data, error } = useQuery(GET_ALL_FILMS);\n\n  if (error) {\n    return <ErrorPage />;\n  }\n\n  if (loading) {\n    return <Loading />;\n  }\n\n  return <ListItems data={data.allFilms.films} />;\n};\n\nexport default Films;\n","import React from \"react\";\nimport ErrorPage from \"../components/ErrorPage\";\nimport Loading from \"../components/Loading\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport ListItems from \"../features/ListItems/ListItems\";\n\nconst Species = () => {\n  const GET_ALL_SPECIES = gql`\n    {\n      allSpecies {\n        species {\n          name\n          id\n        }\n      }\n    }\n  `;\n\n  const { loading, data, error } = useQuery(GET_ALL_SPECIES);\n\n  if (error) {\n    return <ErrorPage />;\n  }\n\n  if (loading) {\n    return <Loading />;\n  }\n\n  return <ListItems data={data.allSpecies.species} />;\n};\n\nexport default Species;\n","import React from \"react\";\nimport ErrorPage from \"../components/ErrorPage\";\nimport Loading from \"../components/Loading\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport ListItems from \"../features/ListItems/ListItems\";\n\nconst Vehicles = () => {\n  const GET_ALL_VEHICLES = gql`\n    {\n      allVehicles {\n        vehicles {\n          name\n          id\n        }\n      }\n    }\n  `;\n\n  const { loading, data, error } = useQuery(GET_ALL_VEHICLES);\n\n  if (error) {\n    return <ErrorPage />;\n  }\n\n  if (loading) {\n    return <Loading />;\n  }\n\n  return <ListItems data={data.allVehicles.vehicles} />;\n};\n\nexport default Vehicles;\n","import React from \"react\";\nimport ErrorPage from \"../components/ErrorPage\";\nimport Loading from \"../components/Loading\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport ListItems from \"../features/ListItems/ListItems\";\n\nconst Starships = () => {\n  const GET_ALL_STARSHIPS = gql`\n    {\n      allStarships {\n        starships {\n          name\n          id\n        }\n      }\n    }\n  `;\n\n  const { loading, data, error } = useQuery(GET_ALL_STARSHIPS);\n\n  if (error) {\n    return <ErrorPage />;\n  }\n\n  if (loading) {\n    return <Loading />;\n  }\n\n  return <ListItems data={data.allStarships.starships} />;\n};\n\nexport default Starships;\n","import styled, { css } from \"styled-components\";\n\nexport const Pill = styled.div`\n  background-color: ${({ theme }) => theme.color.yellow};\n  border-radius: 10px;\n  flex-grow: 1;\n  padding: 10px 15px;\n  margin: 5px;\n  color: ${({ theme }) => theme.color.dark};\n  font-size: ${({ theme }) => theme.fontSize.large};\n  height: max-content;\n  ${({ crawler }) =>\n    crawler &&\n    css`\n      background-color: #010101;\n      border: 1px solid ${({ theme }) => theme.color.yellow};\n      color: ${({ theme }) => theme.color.yellow};\n      padding: 20px;\n      text-align: justify;\n      line-height: 2;\n    `}\n`;\n","import styled, { css } from \"styled-components\";\n\nexport const StyledWrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  height: auto;\n  padding: 15px;\n  margin: auto;\n`;\nexport const StyledDetailsBlock = styled.section`\n  display: flex;\n  flex-wrap: wrap;\n  height: auto;\n  padding: 15px;\n  margin: auto;\n  width: 100%;\n`;\nexport const StyledTileDetail = styled.ul`\n  border-radius: 15px;\n  margin: 5px;\n  padding: 0px 20px;\n`;\n\nexport const ListItem = styled.li`\n  font-size: ${({ theme }) => theme.fontSize.normal};\n`;\n\nexport const StyledTitle = styled.h2`\n  text-align: center;\n  font-size: ${({ theme }) => theme.fontSize.xxlarge};\n  text-transform: capitalize;\n`;\nexport const StyledPill = styled.div`\n  background-color: ${({ theme }) => theme.color.yellow};\n  border-radius: 10px;\n  flex-grow: 1;\n  padding: 5px;\n  margin: 5px;\n  color: ${({ theme }) => theme.color.dark};\n  ${({ crawler }) =>\n    crawler &&\n    css`\n      background-color: #010101;\n      border: 1px solid ${({ theme }) => theme.color.yellow};\n      color: ${({ theme }) => theme.color.yellow};\n      padding: 20px;\n      text-align: justify;\n      line-height: 2;\n    `}\n`;\n","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React from \"react\";\nimport Container from \"../../components/Container\";\nimport ErrorPage from \"../../components/ErrorPage\";\nimport Loading from \"../../components/Loading\";\nimport { Pill } from \"../../components/Pill\";\nimport {\n  StyledTitle,\n  StyledWrapper,\n  StyledTileDetail,\n  StyledDetailsBlock,\n  ListItem,\n} from \"../styled\";\n\nconst FilmDetails = ({ id }) => {\n  const GET_FILM_DETALS = gql`\n    query ($id: ID!) {\n      film(id: $id) {\n        title\n        openingCrawl\n        director\n        releaseDate\n        speciesConnection {\n          species {\n            name\n          }\n        }\n        starshipConnection {\n          starships {\n            name\n          }\n        }\n        vehicleConnection {\n          vehicles {\n            name\n          }\n        }\n        characterConnection {\n          characters {\n            name\n          }\n        }\n        planetConnection {\n          planets {\n            name\n          }\n        }\n      }\n    }\n  `;\n\n  const { loading, data, error } = useQuery(GET_FILM_DETALS, {\n    variables: { id: id },\n  });\n\n  if (loading) {\n    return <Loading />;\n  }\n  if (error) {\n    return <ErrorPage />;\n  }\n\n  return (\n    <Container>\n      <StyledTitle>{data.film.title}</StyledTitle>\n      <StyledWrapper>\n        {data.film.openingCrawl && (\n          <Pill as=\"p\" crawler>\n            {data.film.openingCrawl}\n          </Pill>\n        )}\n        <StyledDetailsBlock>\n          {data.film.director && <Pill>Director: {data.film.director} </Pill>}\n          {data.film.releaseDate && (\n            <Pill>Release date: {data.film.releaseDate} </Pill>\n          )}\n        </StyledDetailsBlock>\n        <StyledDetailsBlock>\n          {data.film.speciesConnection?.species.length > 0 && (\n            <Pill>\n              <StyledTileDetail>\n                Species:\n                {data.film.speciesConnection.species.map((specie) => {\n                  return <ListItem key={specie.name}>{specie.name}</ListItem>;\n                })}\n              </StyledTileDetail>\n            </Pill>\n          )}\n          {data.film.starshipConnection?.starships.length > 0 && (\n            <Pill>\n              <StyledTileDetail>\n                Starships:\n                {data.film.starshipConnection.starships.map((starship) => {\n                  return (\n                    <ListItem key={starship.name}>{starship.name}</ListItem>\n                  );\n                })}\n              </StyledTileDetail>\n            </Pill>\n          )}\n          {data.film.vehilcesConnection?.vehicles.length > 0 && (\n            <Pill>\n              <StyledTileDetail>\n                Vehicles:\n                {data.film.vehilcesConnection.vehicles.map((vehicle) => {\n                  return <ListItem key={vehicle.name}>{vehicle.name}</ListItem>;\n                })}\n              </StyledTileDetail>\n            </Pill>\n          )}\n          {data.film.characterConnection?.characters.length > 0 && (\n            <Pill>\n              <StyledTileDetail>\n                Characters:\n                {data.film.characterConnection.characters.map((character) => {\n                  return (\n                    <ListItem key={character.name}>{character.name}</ListItem>\n                  );\n                })}\n              </StyledTileDetail>\n            </Pill>\n          )}\n          {data.film.planetConnection?.planets.length > 0 && (\n            <Pill>\n              <StyledTileDetail>\n                Planets:\n                {data.film.planetConnection.planets.map((planet) => {\n                  return <ListItem key={planet.name}>{planet.name}</ListItem>;\n                })}\n              </StyledTileDetail>\n            </Pill>\n          )}\n        </StyledDetailsBlock>\n      </StyledWrapper>\n    </Container>\n  );\n};\n\nexport default FilmDetails;\n","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React from \"react\";\nimport Container from \"../../components/Container\";\nimport ErrorPage from \"../../components/ErrorPage\";\nimport Loading from \"../../components/Loading\";\nimport { Pill } from \"../../components/Pill\";\nimport {\n  StyledTitle,\n  StyledWrapper,\n  StyledDetailsBlock,\n  StyledTileDetail,\n  ListItem,\n} from \"../styled\";\n\nconst PersonDetails = ({ id }) => {\n  const GET_PERSON_DETALS = gql`\n    query ($id: ID!) {\n      person(id: $id) {\n        name\n        birthYear\n        eyeColor\n        gender\n        hairColor\n        height\n        mass\n        skinColor\n        homeworld {\n          name\n        }\n        species {\n          name\n        }\n        filmConnection {\n          films {\n            title\n          }\n        }\n      }\n    }\n  `;\n\n  const { loading, data, error } = useQuery(GET_PERSON_DETALS, {\n    variables: { id: id },\n  });\n\n  if (loading) {\n    return <Loading />;\n  }\n  if (error) {\n    return <ErrorPage />;\n  }\n  return (\n    <Container>\n      <StyledTitle>{data.person.name}</StyledTitle>\n      <StyledWrapper>\n        <StyledDetailsBlock>\n          {data.person.birthYear && (\n            <Pill>\n              Birth year: {data.person.birthYear} <br />\n              <small>\n                * The birth year of the person, using the in-universe standard\n                of BBY or ABY - Before the Battle of Yavin or After the Battle\n                of Yavin. The Battle of Yavin is a battle that occurs at the end\n                of Star Wars episode IV: A New Hope.\n              </small>\n            </Pill>\n          )}\n          {data.person.eyeColor && (\n            <Pill>Eye color: {data.person.eyeColor}</Pill>\n          )}\n          {data.person.gender && <Pill>Gender: {data.person.gender}</Pill>}\n          {data.person.hairColor && (\n            <Pill>Hair colors: {data.person.hairColor} </Pill>\n          )}\n          {data.person.height && (\n            <Pill>Height: {data.person.height} centimeters</Pill>\n          )}\n          {data.person.mass && <Pill>Masss: {data.person.mass} kilograms</Pill>}\n          {data.person.skinColor && (\n            <Pill>Skin color: {data.person.skinColor} </Pill>\n          )}</StyledDetailsBlock>\n          <StyledDetailsBlock>\n          {data.person.homeworld?.length > 0 && (\n            <Pill>\n              <StyledTileDetail>\n                Homeworld:\n                {data.person.homeworld.map((home) => {\n                  return <ListItem key={home.name}>{home.name}</ListItem>;\n                })}\n              </StyledTileDetail>\n            </Pill>\n          )}\n          {data.person.species?.length > 0 && (\n            <Pill>\n              <StyledTileDetail>\n                Species:\n                {data.person.species.map((specie) => {\n                  return <ListItem key={specie.name}>{specie.name}</ListItem>;\n                })}\n              </StyledTileDetail>\n            </Pill>\n          )}\n          {data.person.filmConnection?.films.length > 0 && (\n            <Pill>\n              <StyledTileDetail>\n                Films:\n                {data.person.filmConnection.films.map((film) => {\n                  return <ListItem key={film.title}>{film.title}</ListItem>;\n                })}\n              </StyledTileDetail>\n            </Pill>\n          )}\n        </StyledDetailsBlock>\n      </StyledWrapper>\n    </Container>\n  );\n};\n\nexport default PersonDetails;\n","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React from \"react\";\nimport Container from \"../../components/Container\";\nimport ErrorPage from \"../../components/ErrorPage\";\nimport Loading from \"../../components/Loading\";\nimport { Pill } from \"../../components/Pill\";\nimport {\n  StyledTitle,\n  StyledWrapper,\n  StyledDetailsBlock,\n  StyledTileDetail,\n  ListItem,\n} from \"../styled\";\n\nconst PlanetDetails = ({ id }) => {\n  const GET_PLANET_DETALS = gql`\n    query ($id: ID!) {\n      planet(id: $id) {\n        name\n        diameter\n        rotationPeriod\n        orbitalPeriod\n        gravity\n        population\n        climates\n        terrains\n        surfaceWater\n        residentConnection {\n          residents {\n            name\n          }\n        }\n        filmConnection {\n          films {\n            title\n          }\n        }\n      }\n    }\n  `;\n\n  const { loading, data, error } = useQuery(GET_PLANET_DETALS, {\n    variables: { id: id },\n  });\n\n  if (loading) {\n    return <Loading />;\n  }\n  if (error) {\n    return <ErrorPage />;\n  }\n  return (\n    <Container>\n      <StyledTitle>{data.planet.name}</StyledTitle>\n      <StyledWrapper>\n        <StyledDetailsBlock>\n          {data.planet.diameter && (\n            <Pill>Diameter: {data.planet.diameter} kilometers</Pill>\n          )}\n          {data.planet.rotationPeriod && (\n            <Pill>Rotation period: {data.planet.rotationPeriod} hours</Pill>\n          )}\n          {data.planet.orbitalPeriod && (\n            <Pill>Orbital period: {data.planet.orbitalPeriod} days</Pill>\n          )}\n          {data.planet.climates && (\n            <Pill>Climates: {data.planet.climates} </Pill>\n          )}\n          {data.planet.gravity && <Pill>Gravity: {data.planet.gravity} </Pill>}\n          {data.planet.terrains && (\n            <Pill>Terrains: {data.planet.terrains} </Pill>\n          )}\n          {data.planet.surfaceWater && (\n            <Pill>Surface water: {data.planet.surfaceWater} %</Pill>\n          )}\n          {data.planet.population && (\n            <Pill>Average population: {data.planet.population} </Pill>\n          )}\n        </StyledDetailsBlock>\n        <StyledDetailsBlock>\n          {data.planet.residentConnection?.residents.length > 0 && (\n            <Pill>\n              <StyledTileDetail>\n                Residents:\n                {data.planet.residentConnection.residents.map((resident) => {\n                  return (\n                    <ListItem key={resident.name}>{resident.name}</ListItem>\n                  );\n                })}\n              </StyledTileDetail>\n            </Pill>\n          )}\n          {data.planet.filmConnection?.films.length > 0 && (\n            <Pill>\n              <StyledTileDetail>\n                Films:\n                {data.planet.filmConnection.films.map((film) => {\n                  return <ListItem key={film.title}>{film.title}</ListItem>;\n                })}\n              </StyledTileDetail>\n            </Pill>\n          )}\n        </StyledDetailsBlock>\n      </StyledWrapper>\n    </Container>\n  );\n};\n\nexport default PlanetDetails;\n","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React from \"react\";\nimport Container from \"../../components/Container\";\nimport ErrorPage from \"../../components/ErrorPage\";\nimport Loading from \"../../components/Loading\";\nimport { Pill } from \"../../components/Pill\";\nimport {\n  StyledTileDetail,\n  StyledTitle,\n  StyledWrapper,\n  StyledDetailsBlock,\n  ListItem,\n} from \"../styled\";\n\nconst SpeciesDetails = ({ id }) => {\n  const GET_SPECIES_DETALS = gql`\n    query ($id: ID!) {\n      species(id: $id) {\n        name\n        classification\n        eyeColors\n        designation\n        language\n        hairColors\n        averageHeight\n        averageLifespan\n        skinColors\n        homeworld {\n          name\n        }\n        personConnection {\n          people {\n            name\n          }\n        }\n        filmConnection {\n          films {\n            title\n          }\n        }\n      }\n    }\n  `;\n\n  const { loading, data, error } = useQuery(GET_SPECIES_DETALS, {\n    variables: { id: id },\n  });\n\n  if (loading) {\n    return <Loading />;\n  }\n  if (error) {\n    return <ErrorPage />;\n  }\n  return (\n    <Container>\n      <StyledTitle>{data.species.name}</StyledTitle>\n      <StyledWrapper>\n        <StyledDetailsBlock>\n          {data.species.classification && (\n            <Pill>Classification: {data.species.classification}</Pill>\n          )}\n          {data.species.designation && (\n            <Pill>Designation: {data.species.designation}</Pill>\n          )}\n          {data.species.language && (\n            <Pill>Language: {data.species.language} </Pill>\n          )}\n          {data.species.averageLifespan && (\n            <Pill>Average lifespan: {data.species.averageLifespan} years</Pill>\n          )}\n          {data.species.averageHeight && (\n            <Pill>\n              Average height: {data.species.averageHeight} centimeters\n            </Pill>\n          )}\n        </StyledDetailsBlock>\n        <StyledDetailsBlock>\n          {data.species.eyeColors?.length > 0 && (\n            <Pill>\n              <StyledTileDetail>\n                Eye colors:\n                {data.species.eyeColors.map((eye) => {\n                  return <ListItem key={eye}>{eye}</ListItem>;\n                })}\n              </StyledTileDetail>\n            </Pill>\n          )}\n          {data.species.hairColors?.length > 0 && (\n            <Pill>\n              <StyledTileDetail>\n                Hair colors:\n                {data.species.hairColors.map((color) => {\n                  return <ListItem key={color}>{color}</ListItem>;\n                })}\n              </StyledTileDetail>\n            </Pill>\n          )}\n          {data.species.skinColors?.length > 0 && (\n            <Pill>\n              <StyledTileDetail>\n                Skin colors:\n                {data.species.skinColors.map((color) => {\n                  return <ListItem key={color}>{color}</ListItem>;\n                })}\n              </StyledTileDetail>\n            </Pill>\n          )}\n          {data.species.homeworld?.length > 0 && (\n            <Pill>\n              <StyledTileDetail>\n                Homeworld:\n                {data.species.homeworld.map((home) => {\n                  return <ListItem key={home.name}>{home.name}</ListItem>;\n                })}\n              </StyledTileDetail>\n            </Pill>\n          )}\n          {data.species.personConnection?.people.length > 0 && (\n            <Pill>\n              <StyledTileDetail>\n                People:\n                {data.species.personConnection.people.map((person) => {\n                  return <ListItem key={person.name}>{person.name}</ListItem>;\n                })}\n              </StyledTileDetail>\n            </Pill>\n          )}\n          {data.species.filmConnection?.films.length > 0 && (\n            <Pill>\n              <StyledTileDetail>\n                Films:\n                {data.species.filmConnection.films.map((film) => {\n                  return <ListItem key={film.title}>{film.title}</ListItem>;\n                })}\n              </StyledTileDetail>\n            </Pill>\n          )}\n        </StyledDetailsBlock>\n      </StyledWrapper>\n    </Container>\n  );\n};\n\nexport default SpeciesDetails;\n","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React from \"react\";\nimport Container from \"../../components/Container\";\nimport ErrorPage from \"../../components/ErrorPage\";\nimport Loading from \"../../components/Loading\";\nimport { Pill } from \"../../components/Pill\";\nimport {\n  StyledTitle,\n  StyledWrapper,\n  StyledDetailsBlock,\n  StyledTileDetail,\n  ListItem,\n} from \"../styled\";\n\nconst StarshipDetails = ({ id }) => {\n  const GET_STARSHIP_DETALS = gql`\n    query ($id: ID!) {\n      starship(id: $id) {\n        name\n        model\n        starshipClass\n        length\n        crew\n        passengers\n        maxAtmospheringSpeed\n        cargoCapacity\n        manufacturers\n        pilotConnection {\n          pilots {\n            name\n          }\n        }\n        filmConnection {\n          films {\n            title\n          }\n        }\n      }\n    }\n  `;\n\n  const { loading, data, error } = useQuery(GET_STARSHIP_DETALS, {\n    variables: { id: id },\n  });\n\n  if (loading) {\n    return <Loading />;\n  }\n  if (error) {\n    return <ErrorPage />;\n  }\n  return (\n    <Container>\n      <StyledTitle>{data.starship.name}</StyledTitle>\n      <StyledWrapper>\n        <StyledDetailsBlock>\n          {data.starship.model && <Pill>Model: {data.starship.model}</Pill>}\n          {data.starship.starshipClass && (\n            <Pill>Starship class: {data.starship.starshipClass}</Pill>\n          )}\n          {data.starship.length && (\n            <Pill>Length: {data.starship.length} meters</Pill>\n          )}\n          {data.starship.crew && <Pill>Crew: {data.starship.crew} </Pill>}\n          {data.starship.passengers && (\n            <Pill>Passengers: {data.starship.passengers} </Pill>\n          )}\n          {data.starship.maxAtmospheringSpeed && (\n            <Pill>\n              Max atmosphering speed: {data.starship.maxAtmospheringSpeed}{\" \"}\n            </Pill>\n          )}\n          {data.starship.cargoCapacity && (\n            <Pill>Cargo capacity: {data.starship.cargoCapacity} kilograms</Pill>\n          )}\n        </StyledDetailsBlock>\n        <StyledDetailsBlock>\n          {data.starship.manufacturers?.length > 0 && (\n            <Pill>\n              <StyledTileDetail>\n                Manufacturers:\n                {data.starship.manufacturers.map((manufacturer) => {\n                  return <ListItem key={manufacturer}>{manufacturer}</ListItem>;\n                })}\n              </StyledTileDetail>\n            </Pill>\n          )}\n          {data.starship.pilotConnection?.pilots.length > 0 && (\n            <Pill>\n              <StyledTileDetail>\n                Pilops:\n                {data.starship.pilotConnection.pilots.map((pilot) => {\n                  return <ListItem key={pilot.name}>{pilot.name}</ListItem>;\n                })}\n              </StyledTileDetail>\n            </Pill>\n          )}\n          {data.starship.filmConnection?.films.length > 0 && (\n            <Pill>\n              <StyledTileDetail>\n                Films:\n                {data.starship.filmConnection.films.map((film) => {\n                  return <ListItem key={film.title}>{film.title}</ListItem>;\n                })}\n              </StyledTileDetail>\n            </Pill>\n          )}\n        </StyledDetailsBlock>\n      </StyledWrapper>\n    </Container>\n  );\n};\n\nexport default StarshipDetails;\n","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React from \"react\";\nimport Container from \"../../components/Container\";\nimport ErrorPage from \"../../components/ErrorPage\";\nimport Loading from \"../../components/Loading\";\nimport { Pill } from \"../../components/Pill\";\nimport {\n  StyledTitle,\n  StyledWrapper,\n  StyledDetailsBlock,\n  StyledTileDetail,\n  ListItem,\n} from \"../styled\";\n\nconst VehicleDetails = ({ id }) => {\n  const GET_VEHICLE_DETALS = gql`\n    query ($id: ID!) {\n      vehicle(id: $id) {\n        name\n        model\n        vehicleClass\n        length\n        crew\n        passengers\n        maxAtmospheringSpeed\n        cargoCapacity\n        manufacturers\n        pilotConnection {\n          pilots {\n            name\n          }\n        }\n        filmConnection {\n          films {\n            title\n          }\n        }\n      }\n    }\n  `;\n\n  const { loading, data, error } = useQuery(GET_VEHICLE_DETALS, {\n    variables: { id: id },\n  });\n\n  if (loading) {\n    return <Loading />;\n  }\n  if (error) {\n    return <ErrorPage />;\n  }\n  return (\n    <Container>\n      <StyledTitle>{data.vehicle.name}</StyledTitle>\n      <StyledWrapper>\n        <StyledDetailsBlock>\n          {data.vehicle.model && <Pill>Model: {data.vehicle.model}</Pill>}\n          {data.vehicle.vehicleClass && (\n            <Pill>Vehicle class: {data.vehicle.vehicleClass}</Pill>\n          )}\n          {data.vehicle.length && (\n            <Pill>Length: {data.vehicle.length} meters</Pill>\n          )}\n          {data.vehicle.crew && <Pill>Crew: {data.vehicle.crew} </Pill>}\n          {data.vehicle.passengers && (\n            <Pill>Passengers: {data.vehicle.passengers} </Pill>\n          )}\n          {data.vehicle.maxAtmospheringSpeed && (\n            <Pill>\n              Max atmosphering speed: {data.vehicle.maxAtmospheringSpeed}{\" \"}\n            </Pill>\n          )}\n          {data.vehicle.cargoCapacity && (\n            <Pill>Cargo capacity: {data.vehicle.cargoCapacity} kilograms</Pill>\n          )}\n        </StyledDetailsBlock>\n        <StyledDetailsBlock>\n          {data.vehicle.manufacturers?.length > 0 && (\n            <Pill>\n              <StyledTileDetail>\n                Manufacturers:\n                {data.vehicle.manufacturers.map((manufacturer) => {\n                  return <ListItem key={manufacturer}>{manufacturer}</ListItem>;\n                })}\n              </StyledTileDetail>\n            </Pill>\n          )}\n          {data.vehicle.pilotConnection?.pilots.length > 0 && (\n            <Pill>\n              <StyledTileDetail>\n                Pilots:\n                {data.vehicle.pilotConnection.pilots.map((pilot) => {\n                  return <ListItem key={pilot.name}>{pilot.name}</ListItem>;\n                })}\n              </StyledTileDetail>\n            </Pill>\n          )}\n          {data.vehicle.filmConnection?.films.length > 0 && (\n            <Pill>\n              <StyledTileDetail>\n                Films:\n                {data.vehicle.filmConnection.films.map((film) => {\n                  return <ListItem key={film.title}>{film.title}</ListItem>;\n                })}\n              </StyledTileDetail>\n            </Pill>\n          )}\n        </StyledDetailsBlock>\n      </StyledWrapper>\n    </Container>\n  );\n};\n\nexport default VehicleDetails;\n","import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Container from \"../components/Container\";\nimport FilmDetails from \"../features/FilmDetails\";\nimport PersonDetails from \"../features/PersonDetails\";\nimport PlanetDetails from \"../features/PlanetDetails\";\nimport SpeciesDetails from \"../features/SpeciesDetails\";\nimport StarshipDetails from \"../features/StarshipDetails\";\nimport VehicleDetails from \"../features/VehicleDetails\";\n\nconst DetailsPage = () => {\n  const { path, id } = useParams();\n\n  return (\n    <Container>\n      {path === \"planets\" && <PlanetDetails id={id} />}\n      {path === \"people\" && <PersonDetails id={id} />}\n      {path === \"films\" && <FilmDetails id={id} />}\n      {path === \"species\" && <SpeciesDetails id={id} />}\n      {path === \"vehicles\" && <VehicleDetails id={id} />}\n      {path === \"starships\" && <StarshipDetails id={id} />}\n    </Container>\n  );\n};\n\nexport default DetailsPage;\n","import React from \"react\";\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\nimport HomePage from \"./pages/HomePage\";\nimport Navbar from \"./features/Navbar\";\nimport Planets from \"./pages/Planets\";\nimport People from \"./pages/People\";\nimport Films from \"./pages/Films\";\nimport Species from \"./pages/Species\";\nimport Vehicles from \"./pages/Vehicles\";\nimport Starships from \"./pages/Starships\";\nimport DetailsPage from \"./pages/DetailsPage\";\n\nfunction App() {\n  return (\n    <HashRouter>\n      <Navbar />\n      <Switch>\n        <Route exact path={\"/:path/:id\"}>\n          <DetailsPage />\n        </Route>\n        <Route path={\"/films\"}>\n          <Films />\n        </Route>\n        <Route path={\"/planets\"}>\n          <Planets />\n        </Route>\n        <Route path={\"/people\"}>\n          <People />\n        </Route>\n        <Route path={\"/species\"}>\n          <Species />\n        </Route>\n        <Route path={\"/vehicles\"}>\n          <Vehicles />\n        </Route>\n        <Route path={\"/starships\"}>\n          <Starships />\n        </Route>\n        <Route path={\"/\"}>\n          <HomePage />\n        </Route>\n      </Switch>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","export default __webpack_public_path__ + \"static/media/background.9a698fc5.jpg\";","import { createGlobalStyle } from \"styled-components\";\nimport background from \"../assets/background.jpg\";\n\nexport const GlobalStyle = createGlobalStyle`\n      html {\n        box-sizing: border-box;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n      }\n      *,\n      *::before,\n      *::after {\n        box-sizing: inherit;\n    } \n      body {\n        background-color: ${({ theme }) => theme.color.dark};\n        background-image: url(${background});\n        background-size: 100%;\n        background-position: center;\n        background-attachment: fixed;\n        font-family: 'Kanit', sans-serif;\n        color: ${({ theme }) => theme.color.yellow};\n        animation: moveBackground 60s ease-in-out infinite;\n    }\n      p {\n      margin: 5px;\n    }\n\n    @keyframes moveBackground {\n      50% {\n        background-size: 120%;\n      }\n    }\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { theme } from \"./core/theme\";\nimport { GlobalStyle } from \"./core/GlobalStyle\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { ThemeProvider } from \"styled-components\";\nimport { ApolloClient, InMemoryCache, ApolloProvider } from \"@apollo/client\";\n\nconst client = new ApolloClient({\n  uri: \"https://swapi-graphql.netlify.app/.netlify/functions/index\",\n  cache: new InMemoryCache(),\n  headers: {\n    \"Access-Control-Allow-Origin\": \"*\",\n    \"Access-Control-Allow-Methods\": \"DELETE, POST, GET, OPTIONS\",\n    \"Access-Control-Allow-Headers\":\n      \"Content-Type, Access-Control-Allow-Headers, Authorization, X-Requested-With\",\n  },\n  credentials: \"omit\",\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <GlobalStyle />\n      <ApolloProvider client={client}>\n        <App />\n      </ApolloProvider>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const theme = {\n  fontSize: {\n    xSmall: \"14px\",\n    small: \"16px\",\n    normal: \"18px\",\n    medium: \"20px\",\n    large: \"22px\",\n    xlarge: \"24px\",\n    xxlarge: \"36px\",\n    xxxLarge: \"64px\",\n  },\n  color: {\n    black: \"000000\",\n    dark: \"#020001\",\n    yellow: \"#e8e012\",\n    light: \"FFFFFF\",\n  },\n  media: {\n    extraMobileSmall: \"340px\",\n    extraMobile: \"575.98px\",\n    mobile: \"767.98px\",\n    tablet: \"991.98px\",\n    desktop: \"1199.98px\",\n  },\n};\n"],"sourceRoot":""}